Index: src/main/java/com/example/mediaplayerproject/SearchDB.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mediaplayerproject;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\n\r\npublic class SearchDB {\r\n    //ArrayList method for complete search button, in order to store data\r\n    public ArrayList<String> searchComplete(String searchText, boolean toggle) throws SQLException {\r\n        ArrayList<String> tempArrayList = new ArrayList<>();\r\n        ArrayList<String> sortArrayList = new ArrayList<>();\r\n        ArrayList<String> sortedMediaArrayList = new ArrayList<>();\r\n\r\n\r\n\r\n        if (!toggle) { // if toggle media is selected, makes connection to DB and executes the following sql query\r\n            Connection connection = DBConnection.getDbConnection().makeConnection();\r\n            PreparedStatement preparedStatement = connection.prepareCall(\"SELECT * FROM tblMediaInfo\");\r\n            ResultSet resultSet = preparedStatement.executeQuery();\r\n            //selects everything from tblMediaInfo and stores it in a temporary ArrayList\r\n            while (resultSet.next()) {\r\n                tempArrayList.add(resultSet.getString(2));\r\n            }\r\n            //sorts through the temporary ArrayList and compares it with what the user types in the searchbox\r\n                // in order to find a match\r\n            for (String s : tempArrayList) {\r\n                if (s.equalsIgnoreCase(searchText)) {\r\n                    sortArrayList.add(s);\r\n                }\r\n            }\r\n            return sortArrayList; // returns any matches found\r\n        }else {\r\n            // else, if toggle creator is selected, does the same thing mentioned above\r\n            Connection connection = DBConnection.getDbConnection().makeConnection();\r\n            PreparedStatement preparedStatement = connection.prepareCall(\"SELECT * FROM tblCreator\");\r\n            ResultSet resultSet = preparedStatement.executeQuery();\r\n            //adds to temporary arraylist\r\n            while (resultSet.next()) {\r\n                tempArrayList.add(resultSet.getString(2));\r\n            }\r\n            //sorts and compares\r\n            for (String s : tempArrayList) {\r\n                if (s.equalsIgnoreCase(searchText)) {\r\n                    sortArrayList.add(s);\r\n                }\r\n            }\r\n            //for every artists found in the sorted Arraylist, adds media associated with matched artist to a sortedMediaArrayList\r\n              //with an SQL innerjoin and subquery below:\r\n            for (String s : sortArrayList) {\r\n                String sqlQuery = \"Select * from tblCreatorMedia inner join tblMediaInfo on tblCreatorMedia.fldMediaId = tblMediaInfo.fldMediaId where fldCreatorId = (SELECT fldCreatorId from tblCreator where fldCreatorName = '\" + s + \"')\";\r\n                preparedStatement = connection.prepareCall(sqlQuery);\r\n                resultSet = preparedStatement.executeQuery();\r\n\r\n                while (resultSet.next()) {\r\n                    sortedMediaArrayList.add(resultSet.getString(5));\r\n                }\r\n            }\r\n            return sortedMediaArrayList; // returns media associated with artist that was typed in\r\n        }\r\n    }\r\n    //ArrayList method for partial search button for data storage\r\n    public ArrayList<String> searchPartial(String searchText, boolean toggle) throws SQLException {\r\n        ArrayList<String> tempArrayList = new ArrayList<>();\r\n        ArrayList<String> sortArrayList = new ArrayList<>();\r\n        ArrayList<String> sortedMediaArrayList = new ArrayList<>();\r\n\r\n        if (!toggle) { // if toggle media is selected connects to DB and executes sql query:\r\n            Connection connection = DBConnection.getDbConnection().makeConnection();\r\n            PreparedStatement preparedStatement = connection.prepareCall(\"SELECT * FROM tblMediaInfo\");\r\n            ResultSet resultSet = preparedStatement.executeQuery();\r\n            //selects everything from tblMediaInfo and stores it in a temporary ArrayList\r\n            while (resultSet.next()) {\r\n                tempArrayList.add(resultSet.getString(2));\r\n            }\r\n            //sorts through the temporary ArrayList and compares it with what the user types in the searchbox\r\n                // in order to find a matching media file containing anything the user types in.\r\n            for (String s : tempArrayList) {\r\n                if (s.toLowerCase().contains(searchText.toLowerCase())) {\r\n                    sortArrayList.add(s);\r\n                }\r\n            }\r\n            if (sortArrayList.isEmpty()) {\r\n                sortArrayList.add(\"Nothing found\");\r\n            }\r\n            return sortArrayList;\r\n        }else { // same thing with creator\r\n            Connection connection = DBConnection.getDbConnection().makeConnection();\r\n            PreparedStatement preparedStatement = connection.prepareCall(\"SELECT * FROM tblCreator\");\r\n            ResultSet resultSet = preparedStatement.executeQuery();\r\n\r\n            while (resultSet.next()) {\r\n                tempArrayList.add(resultSet.getString(2));\r\n            }\r\n\r\n            for (String s : tempArrayList) {\r\n                if (s.toLowerCase().contains(searchText.toLowerCase())) {\r\n                    sortArrayList.add(s);\r\n                }\r\n            }\r\n\r\n            for (String s : sortArrayList) {\r\n                String sqlQuery = \"Select * from tblCreatorMedia inner join tblMediaInfo on tblCreatorMedia.fldMediaId = tblMediaInfo.fldMediaId where fldCreatorId = (SELECT fldCreatorId from tblCreator where fldCreatorName = '\" + s + \"')\";\r\n                preparedStatement = connection.prepareCall(sqlQuery);\r\n                resultSet = preparedStatement.executeQuery();\r\n\r\n                while (resultSet.next()) {\r\n                    if (!sortedMediaArrayList.contains(resultSet.getString(5))) {\r\n                        sortedMediaArrayList.add(resultSet.getString(5));\r\n                    }\r\n                }\r\n            }\r\n            if (sortedMediaArrayList.isEmpty()) {\r\n                sortedMediaArrayList.add(\"Nothing found\");\r\n            }\r\n\r\n            return sortedMediaArrayList;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/mediaplayerproject/SearchDB.java b/src/main/java/com/example/mediaplayerproject/SearchDB.java
--- a/src/main/java/com/example/mediaplayerproject/SearchDB.java	(revision 69eebe2950e693a9919474b93d4ca45f40ffb100)
+++ b/src/main/java/com/example/mediaplayerproject/SearchDB.java	(date 1704880926522)
@@ -99,7 +99,6 @@
                     sortArrayList.add(s);
                 }
             }
-
             for (String s : sortArrayList) {
                 String sqlQuery = "Select * from tblCreatorMedia inner join tblMediaInfo on tblCreatorMedia.fldMediaId = tblMediaInfo.fldMediaId where fldCreatorId = (SELECT fldCreatorId from tblCreator where fldCreatorName = '" + s + "')";
                 preparedStatement = connection.prepareCall(sqlQuery);
Index: src/main/java/com/example/mediaplayerproject/HelloApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mediaplayerproject;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Scene;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.IOException;\r\n\r\npublic class HelloApplication extends Application {\r\n    @Override\r\n    public void start(Stage stage) throws IOException {\r\n        FXMLLoader fxmlLoader = new FXMLLoader(HelloApplication.class.getResource(\"hello-view.fxml\"));\r\n        Scene scene = new Scene(fxmlLoader.load(), 320, 240);\r\n        stage.setTitle(\"Media Player\");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n\r\n        launch();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/mediaplayerproject/HelloApplication.java b/src/main/java/com/example/mediaplayerproject/HelloApplication.java
--- a/src/main/java/com/example/mediaplayerproject/HelloApplication.java	(revision 69eebe2950e693a9919474b93d4ca45f40ffb100)
+++ b/src/main/java/com/example/mediaplayerproject/HelloApplication.java	(date 1704880926534)
@@ -18,7 +18,6 @@
     }
 
     public static void main(String[] args) {
-
         launch();
     }
 }
\ No newline at end of file
